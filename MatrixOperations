#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define SIZE 3
#define MAX_ROWS 5
#define MAX_COLUMNS 5
 
int SelectExercises();
int back;
int Integer_Result;

void AddMatrices(int Rows, int Columns) {
    double A[MAX_ROWS][MAX_COLUMNS], B[MAX_ROWS][MAX_COLUMNS], C[MAX_ROWS][MAX_COLUMNS];
    FILE *MatrixOperations;

    MatrixOperations = fopen("MatrixOperations.txt", "a");
    if (MatrixOperations == NULL) {
        printf("Error Opening the File.\n");
        exit(EXIT_FAILURE);
    }

    fprintf(MatrixOperations, "\t\t\t1st Array : \n\n");
    printf("\n \t\tEnter Elements in the 1st Array : \n");
    for (int i = 0; i < Rows; i++) {
        printf("\t");
        for (int j = 0; j < Columns; j++) {
            printf("A%d%d: ", i + 1, j + 1);
            scanf("%lf", &A[i][j]);
            printf("\t");
            fprintf(MatrixOperations, "\t%.7g\t", A[i][j]);
        }
        fprintf(MatrixOperations, "\n");
        printf("\n");
    }
    fprintf(MatrixOperations, "\n");

    fprintf(MatrixOperations, "\t\t\t2nd Array : \n\n");
    printf("\n \t\tEnter Elements in the 2nd Array : \n");
    for (int i = 0; i < Rows; i++) {
        printf("\t");
        for (int j = 0; j < Columns; j++) {
            printf("B%d%d: ", i + 1, j + 1);
            scanf("%lf", &B[i][j]);
            printf("\t");
            fprintf(MatrixOperations, "\t%.7g\t", B[i][j]);
        }
        fprintf(MatrixOperations, "\n");
        printf("\n");
    }
    fprintf(MatrixOperations, "\n");

    fprintf(MatrixOperations, "\t\t\tThe Addition of the arrays : \n\n");
    printf("\n \t\tThe Addition of the arrays : \n");
    for (int i = 0; i < Rows; i++) {
        for (int j = 0; j < Columns; j++) {
            C[i][j] = A[i][j] + B[i][j];
            printf("\t%.7g\t", C[i][j]);
            fprintf(MatrixOperations, "\t%.7g\t", C[i][j]);
        }
        fprintf(MatrixOperations, "\n");
        printf("\n");
    }

    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    fprintf(MatrixOperations, "\nThe Addition calculated at: %d-%02d-%02d %02d:%02d:%02d\n\n",
            tm_info->tm_year + 1900, tm_info->tm_mon + 1, tm_info->tm_mday,
            tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec);

    fclose(MatrixOperations);

    printf("\n\n\tPress 1 -> Add another arrays with the same dimensions.\n");
    printf("\tPress 2 -> Another exercise.\n");
    printf("\tPress any other button to exit.\n");
    scanf("%d", &back);

    if (back == 1) {
        AddMatrices(Rows, Columns);
    } else if (back == 2) {
        SelectExercises();
    } else {
        exit(0);
    }
}

void SubtractMatrices(int Rows, int Columns) {
    double A[MAX_ROWS][MAX_COLUMNS], B[MAX_ROWS][MAX_COLUMNS], C[MAX_ROWS][MAX_COLUMNS];
    bool hasBeenCalled = false;
    int back;

    FILE *MatrixOperations = fopen("MatrixOperations.txt", "a");
    if (MatrixOperations == NULL) {
        printf("Error Opening the File.\n");
        exit(EXIT_FAILURE);
    }

    fprintf(MatrixOperations, "\t\t\t1st Array : \n\n");
    printf("\n \t\tEnter Elements in the 1st Array : \n");
    for (int i = 0; i < Rows; i++) {
        printf("\t");
        for (int j = 0; j < Columns; j++) {
            printf("A%d%d: ", i + 1, j + 1);
            scanf("%lf", &A[i][j]);
            printf("\t");
            fprintf(MatrixOperations, "\t%.7g", A[i][j]);
        }
        fprintf(MatrixOperations, "\n");
        printf("\n");
    }
    fprintf(MatrixOperations, "\n");

    fprintf(MatrixOperations, "\t\t\t2nd Array : \n\n");
    printf("\n \t\tEnter Elements in the 2nd Array : \n");
    for (int i = 0; i < Rows; i++) {
        printf("\t");
        for (int j = 0; j < Columns; j++) {
            printf("B%d%d: ", i + 1, j + 1);
            scanf("%lf", &B[i][j]);
            printf("\t");
            fprintf(MatrixOperations, "\t%.7g", B[i][j]);
        }
        fprintf(MatrixOperations, "\n");
        printf("\n");
    }
    fprintf(MatrixOperations, "\n");

    fprintf(MatrixOperations, "\t\t\tThe substraction of the arrays : \n\n");
    printf("\n \t\tThe substraction of the arrays : \n");
    for (int i = 0; i < Rows; i++) {
        for (int j = 0; j < Columns; j++) {
            C[i][j] = A[i][j] - B[i][j];
            printf("\t%.7g", C[i][j]);
            fprintf(MatrixOperations, "\t%.7g", C[i][j]);
        }
        fprintf(MatrixOperations, "\n");
        printf("\n");
    }

    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    fprintf(MatrixOperations, "\nThe substraction calculated at: %d-%02d-%02d %02d:%02d:%02d\n\n",
            tm_info->tm_year + 1900, tm_info->tm_mon + 1, tm_info->tm_mday,
            tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec);

    fclose(MatrixOperations);

    printf("\n\n\tPress 1 -> Subtract another array with the same dimensions.\n");
    printf("\tPress 2 -> Another exercise.\n");
    printf("\tPress any other button to exit.\n");
    scanf("%d", &back);

    if (back == 1) {
        SubtractMatrices(Rows, Columns);
    } else if (back == 2) {
        SelectExercises();
    } else {
        exit(0);
    }
}
MultiplyingOf2Matrixes(int Rows, int Columns, int Columns2, int Integer_Result) {
	
	double A[Rows][Columns], B[Columns][Columns2], C[SIZE][SIZE];
	
	static bool hasBeenCalled = false; 
  	static int calculatedResistance;

  	if (hasBeenCalled) {
    	return calculatedResistance; 
  	}
  	FILE *MatrixOperations;
  		MatrixOperations = fopen("MatrixOperations.txt", "a");
  			if ( MatrixOperations == NULL) {
  				printf("Error Opening the File.\n");
  				exit(0);
			  }
				printf("\n \t\tEnter Elements in the 1st Array : \n");
				fprintf(MatrixOperations, "\t\t\t1st Array : \n\n");
							
		for (int i = 0; i < Rows; i++) {
			printf("\t");
    		for (int j = 0; j < Columns; j++) {
    			printf("A%d%d: ", i + 1, j + 1);
        		scanf("%lf", &A[i][j]);
        		printf("\t");
        		if (fmod(A[i][j], 1.0) == 0.0) {
                	int Integer_Value = (int)A[i][j];
                		fprintf(MatrixOperations, "\t%d", Integer_Value);
            		} else {
                		fprintf(MatrixOperations, "\t%.7g", A[i][j]); 
    		}
		}
		fprintf(MatrixOperations, "\n");
    	printf("\n");
	}
	fprintf(MatrixOperations, "\n");
	
				printf("\n \t\tEnter Elements in the 2nd Matrix : \n");
				fprintf(MatrixOperations, "\t\t\t2nd Array : \n\n");
		
		for (int i = 0; i < Columns; i++) {
			printf("\t");
    		for (int j = 0; j < Columns2; j++) {
    			printf("B%d%d: ", i + 1, j + 1);
        		scanf("%lf", &B[i][j]);
        		printf("\t");
        		if (fmod(B[i][j], 1.0) == 0.0) {
                	int Integer_Value = (int)B[i][j];
                		fprintf(MatrixOperations, "\t%d", Integer_Value);
            		} else {
                		fprintf(MatrixOperations, "\t%.7g", B[i][j]); 
    		}
		}
		fprintf(MatrixOperations, "\n");
    	printf("\n");
	}
    fprintf(MatrixOperations, "\n");    

            			printf("\n \t\tThe multiplication of the 2 arrays : \n");
				fprintf(MatrixOperations, "\t\t\tMultiplication : \n\n");
							
	 for (int i = 0; i < Rows; i++) {
    		for (int j = 0; j < Columns2; j++) {
    			C[i][j] = 0;
    			for (int k = 0; k < Columns; k++) {
    				C[i][j] += A[i][k] * B[k][j];
				}
        		if (fmod(C[i][j], 1.0) == 0.0) {
                	int Integer_Value = (int)C[i][j];
                	printf("\t%d\t", Integer_Value);
                	fprintf(MatrixOperations, "\t%d", Integer_Value);
            	} 
				else {
                	printf("\t%.7g\t", C[i][j]);
					fprintf(MatrixOperations, "\t%.7g", C[i][j]);  
            	}
    		}
    		fprintf(MatrixOperations, "\n");
    		printf("\n");
    	}
    	
		time_t t = time(NULL);
    		struct tm *tm_info = localtime(&t);
    		fprintf(MatrixOperations, "\nMultiplication calculated at: %d-%02d-%02d %02d:%02d:%02d\n\n",
            	tm_info->tm_year + 1900, tm_info->tm_mon + 1, tm_info->tm_mday,
            	tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec);	
								
		fclose(MatrixOperations);
							
    		printf("\n\tPress 1 -> Multiply another array with the same dimensions.\n");
			printf("\tPress 2 -> Another exercise.\n");
			printf("\tPress any other button to exit.\n");
			scanf("%d", &back);
		
		 if (back == 1) {
		 	MultiplyingOf2Matrixes(Rows, Columns, Columns2, Integer_Result);
		 } else if (back == 2) {
		 	SelectExercises();
		 } else {
		 	exit(0);
		 }
    		printf("\n");
}

void CalculateDeterminant(int Columns) {
	
	double A[Columns][Columns], DetA;

	FILE *MatrixOperations;
		MatrixOperations = fopen("MatrixOperations.txt", "a");
		if ( MatrixOperations == NULL) {
			printf("Error Opening the File.\n");
			exit(EXIT_FAILURE);
		}
			fprintf(MatrixOperations, "\t\tArray : \n\n");
	
	if ( Columns == 1) {
		printf("\n \t\tEnter an element in the Array : \n");
		printf("\tA11: ");
		scanf("%lf", &A[0][0]);
		printf("\n\t\tThe determinant of the Array : \n");
			if ( fmod(A[0][0], 1.0) == 0.0) {
				int Integer_Value = (int)A[0][0];
				printf("\t%d", Integer_Value);
			}
			else {
				printf("%lf", A[0][0]);	
			}
	}
	else if ( Columns == 2) {
		printf("\n \t\tEnter Elements in the Array : \n");
			for (int i = 0; i < Columns; i++) {
  				for (int j = 0; j < Columns; j++) {
  					printf("\tA%d%d: ", i + 1, j + 1);
  					scanf("%lf", &A[i][j]);
  						if (fmod(A[i][j], 1.0) == 0.0) {
                			int Integer_Value = (int)A[i][j];
                			fprintf(MatrixOperations, "\t%d", Integer_Value);
            			} 
						else {
                			fprintf(MatrixOperations, "\t%.7g", A[i][j]); 
            		}
			  	}
			  	fprintf(MatrixOperations, "\n\n");
			  	printf("\n"); 
		}
		DetA = 	A[0][0] * A[1][1] - A[0][1] * A[1][0];

		if ( fmod(DetA, 1.0) == 0.0 ) {
				int Integer_Value = (int)DetA;
				printf("\t\tThe determinant of the array : \n\t%d", Integer_Value);
				fprintf(MatrixOperations, "\t\tDeterminant : \n\n \t %.7g \n", Integer_Value);
			}
		else {
				printf("\t\tThe determinant of the array : \n\t%.7g", DetA);
				fprintf(MatrixOperations, "\t\tDeterminant : \n\n \t %.7g \n", DetA);
			}
}
	else {
		printf("\n \t\tEnter Elements in the Array : \n");
			for (int i = 0; i < Columns; i++) {
  				for (int j = 0; j < Columns; j++) {
  					printf("\tA%d%d: ", i + 1, j + 1);
  					scanf("%lf", &A[i][j]);
  						if (fmod(A[i][j], 1.0) == 0.0) {
                			int Integer_Value = (int)A[i][j];
                			fprintf(MatrixOperations, "\t%d", Integer_Value);
            			} 
						else {
                		fprintf(MatrixOperations, "\t%.7g", A[i][j]); 
			  	} 	
			}
				fprintf(MatrixOperations, "\n\n");
			  	printf("\n"); 
		}
		
		DetA = A[0][0] * ( A[1][1] * A[2][2] - ( A[1][2] * A[2][1] ) ) -
		  	   A[0][1] * ( A[1][0] * A[2][2] - ( A[2][0] * A[1][2] ) ) + 
			   A[0][2] * ( A[1][0] * A[2][1] - ( A[2][0] * A[1][1] ) );
			
			  if ( fmod(DetA, 1.0) == 0) {
			  		int Integer_Value = DetA;
			  		printf("\n \t\tThe determinant of the array : \n \t%d", Integer_Value);
			  		fprintf(MatrixOperations, "\t\tDeterminant : \n\n \t%d", Integer_Value);
			  } 
			  else {
			  	printf("\n \t\tThe determinant of the array : \n\t%.7g\n", DetA);
			  	fprintf(MatrixOperations, "\t\tDeterminant : \n\n \t%.7g", DetA);
			  }
  	}
  	time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    fprintf(MatrixOperations, "\n\nThe Determinant calculated at: %d-%02d-%02d %02d:%02d:%02d\n\n",
            tm_info->tm_year + 1900, tm_info->tm_mon + 1, tm_info->tm_mday,
            tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec);
            
    fclose(MatrixOperations);
    
  	printf("\n\n\tPress 1 -> Find the determinant of another array.\n");
			printf("\tPress 2 -> Another exercise.\n");
			printf("\tPress any other button to exit.\n");
			scanf("%d", &back);
		
		 	if (back == 1) {
		 		CalculateDeterminant(Columns);
		 	} else if (back == 2) {
		 		SelectExercises();
		 	} else {
		 		exit(0);
	}
}

SelectExercises() {
    int selection, Rows, Columns, Columns2;

    printf("Select one of the following options: \n");
    printf("\t1 -> Add 2 arrays.\n");
    printf("\t2 -> Substract 2 arrays.\n");
    printf("\t3 -> Multiply 2 arrays.\n");
	printf("\t4 -> Calculate the inverse of an array.\n");
	printf("\t5 -> Calculate the determinant of an array.\n");
    scanf("%d", &selection);

    if (selection == 1) {
        printf("Enter the number of Rows for each Matrix, max(5): ");
        scanf("%d", &Rows);
        printf("Enter the number of Columns for each Matrix, max(5): ");
        scanf("%d", &Columns);
        if (Rows > 0 && Rows <= MAX_ROWS && Columns > 0 && Columns <= MAX_COLUMNS) {
            AddMatrices(Rows, Columns);
        } 
		else {
            printf("Invalid arrays dimensions. Please try again.\n");
        }
    }
    else if (selection == 2) { // Logic for Substracting arrays
		printf("Enter the number of Rows for each array, max(5): ");
        scanf("%d", &Rows);
        printf("Enter the number of Columns for each array, max(5): ");
        scanf("%d",&Columns);
        	if (Rows > 0 && Rows <= 5 && Columns > 0 && Columns <= 5) {
        		SubtractMatrices(Rows, Columns);
			}
			else {
            		printf("Invalid arrays dimensions. Please try again.\n");
        }
	}
	else if (selection == 3) { // Logic for Multiplying arrays
		printf("Enter the number of Rows for the 1st Matrix, max(3): ");
        scanf("%d", &Rows);
        printf("Enter the number of Columns for the 1st Matrix and the Rows for the 2nd Matrix, max(3): ");
        scanf("%d", &Columns);
        printf("Enter the number of Columns for the 2nd Matrix, max(3): ");
        scanf("%d", &Columns2);
        	if (Rows > 0 && Rows <= 3 && Columns > 0 && Columns <= 3 && Columns2 > 0 && Columns2 <= 3) {
        			MultiplyingOf2Matrixes(Rows, Columns, Columns2, Integer_Result);
			}
			else {
            		printf("Invalid matrix dimensions. Please try again.\n");
        }
    }/*
    else if (selection == 4) { // Logic for finding the inverse of an array 
		printf("Enter the number of Rows/Columns for the Array, max(3): ");
        scanf("%d", &Rows); 
        	if ( ( Rows > 0 ) && ( Rows <= 3) ) {
        		CalculateInverseArray();
			} else {
            		printf("Invalid array dimension. Please try again.\n");
        }
	}
	else if (selection == 5) { // Logic for finding the determinant of an array
		printf("Enter the number of Rows/Columns for the Array, max(3): ");
		scanf("%d", &Columns);
			if ( ( Columns > 0 ) && ( Columns <= 3) ) {
				CalculateDeterminant(Columns);
			}
			else {
					printf("Invalid array dimension. Please try again.\n");
			}
		}
	}
}
int main() {
    SelectExercises();
    return 0;
}
